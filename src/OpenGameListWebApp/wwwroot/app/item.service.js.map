{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"66BAMAA,YAAA,WACI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA0CtB,MAxCIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAGzB,OAFW,OAAPG,MAAeC,KAAOD,KAEnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAGzB,OAFW,OAAPG,MAAeC,KAAOD,KAEnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAGzB,OAFW,OAAPG,MAAeC,KAAOD,KAEnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAMV,KAAML,KAAKC,QAAUa,EAE3B,OAAOd,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMV,KAAKW,cAGZb,YAAAI,UAAAS,YAAR,SAAoBM,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMR,OAAOQ,OAAS,iBA5CtDnB,YAAAwB,YAACC,OAAAC,4EACDC,UAAA,cAAA3B","file":"item.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Item} from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"api/items/\";\r\n\r\n    getLatest(num?: number) {\r\n        let url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num; }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        let url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num; }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?: number) {\r\n        let url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) { url += num; }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) { throw new Error(\"id is required.\"); }\r\n        const url = this.baseUrl + id;\r\n\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n} "]}