{"version":3,"sources":["auth.service.ts"],"names":["AuthService","http","this","authKey","prototype","login","username","password","_this","url","data","client_id","grant_type","scope","post","toUrlEncodedString","http_1","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","i","getItem","parse","isLoggedIn","__decorate","core_1","Injectable","exports_1"],"mappings":"q6BAMAA,YAAA,WAGI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,OA4Ed,MAxEIH,aAAAI,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,GAAAC,OAAAN,KACQO,IAAM,oBAENC,MACAJ,SAAUA,SACVC,SAAUA,SACVI,UAAW,eAEXC,WAAY,WAEZC,MAAO,+BAGX,OAAOX,MAAKD,KAAKa,KACbL,IACAP,KAAKa,mBAAmBL,MACxB,GAAIM,QAAAC,gBACAC,QAAS,GAAIF,QAAAG,SAAUC,eAAgB,yCAE1CC,IAAI,SAAAC,UACD,GAAIC,MAAOD,SAASE,MAIpB,OAHAC,SAAQC,IAAI,qDACZD,QAAQC,IAAIH,MACZf,MAAKmB,QAAQJ,MACNA,QAInBvB,YAAAI,UAAAwB,OAAA,WAEI,MADA1B,MAAKyB,QAAQ,OACN,GAIX3B,YAAAI,UAAAW,mBAAA,SAAmBL,MACf,GAAImB,MAAO,EACX,KAAK,GAAIC,OAAOpB,MACRmB,KAAKE,SACLF,MAAQ,KAEZA,MAAQC,IAAM,IACdD,MAAQG,mBAAmBtB,KAAKoB,KAEpC,OAAOD,OAIX7B,YAAAI,UAAAuB,QAAA,SAAQJ,MAOJ,MANIA,MACAU,aAAaC,QAAQhC,KAAKC,QAASgC,KAAKC,UAAUb,OAGlDU,aAAaI,WAAWnC,KAAKC,UAE1B,GAIXH,YAAAI,UAAAkC,QAAA,WACI,GAAIC,GAAIN,aAAaO,QAAQtC,KAAKC,QAClC,OAAIoC,GACOJ,KAAKM,MAAMF,GAGX,MAKfvC,YAAAI,UAAAsC,WAAA,WACI,MAA6C,OAAtCT,aAAaO,QAAQtC,KAAKC,UA5EzCH,YAAA2C,YAACC,OAAAC,qFACDC,UAAA,cAAA9C","file":"auth.service.js","sourcesContent":["import {Injectable, EventEmitter} from \"@angular/core\";\r\nimport {Http, Headers, Response, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {AuthHttp} from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    login(username: string, password: string): any {\r\n        var url = \"api/connect/token\";  // JwtProvider's LoginPath \r\n\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"OpenGameList\",\r\n            // required when signing up with username/password \r\n            grant_type: \"password\",\r\n            // space-separated list of scopes for which the token is issued \r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(\r\n            url,\r\n            this.toUrlEncodedString(data),\r\n            new RequestOptions({\r\n                headers: new Headers({ \"Content-Type\": \"application/x-www-form-urlencoded\" })\r\n            }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log(\"The following auth JSON object has been received:\");\r\n                console.log(auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): boolean {\r\n        this.setAuth(null);\r\n        return false;\r\n    }\r\n\r\n    // Converts a Json object to urlencoded format \r\n    toUrlEncodedString(data: any) {\r\n        var body = \"\";\r\n        for (var key in data) {\r\n            if (body.length) {\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    // Persist auth into localStorage or removes it if a NULL argument is given \r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        }\r\n        else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Retrieves the auth JSON object (or NULL if none) \r\n    getAuth(): any {\r\n        var i = localStorage.getItem(this.authKey);\r\n        if (i) {\r\n            return JSON.parse(i);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Returns TRUE if the user is logged in, FALSE otherwise. \r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n} "]}